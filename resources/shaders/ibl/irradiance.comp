#version 450

layout (local_size_x = 8, local_size_y = 8, local_size_z = 6) in;

layout(set = 0, binding = 0) uniform samplerCube envMap;
layout(set = 0, binding = 1, rgba32f) uniform writeonly imageCube irradianceMap;

const float PI = 3.14159265359;
const float SAMPLE_DELTA = 0.025;

vec3 getDirection(uint face, vec2 uv) {
    uv = uv * 2.0 - 1.0;// 转换到[-1,1]

    switch (face) {
        case 0: return vec3(1.0, -uv.y, -uv.x);// 右
        case 1: return vec3(-1.0, -uv.y, uv.x);// 左
        case 2: return vec3(uv.x, 1.0, uv.y);// 上
        case 3: return vec3(uv.x, -1.0, -uv.y);// 下
        case 4: return vec3(uv.x, -uv.y, 1.0);// 前
        case 5: return vec3(-uv.x, -uv.y, -1.0);// 后
    }
    return vec3(0);
}

vec2 sampleSphericalMap(vec3 dir) {
    vec2 uv = vec2(atan(dir.z, dir.x), asin(dir.y));
    uv /= vec2(2.0 * PI, PI);
    uv += 0.5;
    return uv;
}

void main() {
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    vec3 normal = getDirection(pos.z, vec2(pos.xy) / 512.0);

    vec3 irradiance = vec3(0.0);

    // 半球采样
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, normal));
    up = normalize(cross(normal, right));

    uint sampleCount = 0u;
    for (float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA) {
        for (float theta = 0.0; theta < 0.5 * PI; theta += SAMPLE_DELTA) {
            // spherical to cartesian (in tangent space)
            vec3 tangent = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sampleVec = tangent.x * right + tangent.y * up + tangent.z * normal;

            irradiance += texture(envMap, sampleVec).rgb * cos(theta) * sin(theta);
            sampleCount++;
        }
    }

    irradiance = PI * irradiance / float(sampleCount);
    imageStore(irradianceMap, pos, vec4(irradiance, 1.0));
}
