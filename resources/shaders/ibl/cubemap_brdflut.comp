// based on https://github.com/SaschaWillems/Vulkan-glTF-PBR/blob/master/data/shaders/genbrdflut.frag
#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 6) in;

const uint NUM_SAMPLES = 1024u;

layout (set = 0, binding = 0, rgba16f) uniform image2D OutputBRDFlut;
layout (set = 0, binding = 1, rgba32f) uniform writeonly imageCube EnvironmentMap;

layout (set = 1, binding = 0) uniform sampler2D EquirectMap;

layout (push_constant) uniform PushConsts {
    uint BRDF_W;
    uint BRDF_H;
} pushConsts;

const float PI = 3.1415926536;

// based on http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/
float random(vec2 co) {
    float a = 12.9898;
    float b = 78.233;
    float c = 43758.5453;
    float dt= dot(co.xy, vec2(a, b));
    float sn= mod(dt, 3.14);
    return fract(sin(sn) * c);
}

vec2 hammersley2d(uint i, uint N) {
    // Radical inverse based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
    uint bits = (i << 16u) | (i >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    float rdi = float(bits) * 2.3283064365386963e-10;
    return vec2(float(i) /float(N), rdi);
}

// based on http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_slides.pdf
vec3 importanceSample_GGX(vec2 Xi, float roughness, vec3 normal) {
    // Maps a 2D point to a hemisphere with spread based on roughness
    float alpha = roughness * roughness;
    float phi = 2.0 * PI * Xi.x + random(normal.xz) * 0.1;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha*alpha - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);

    // Tangent space
    vec3 up = abs(normal.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangentX = normalize(cross(up, normal));
    vec3 tangentY = normalize(cross(normal, tangentX));

    // Convert to world Space
    return normalize(tangentX * H.x + tangentY * H.y + normal * H.z);
}

// Geometric Shadowing function
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness) {
    float k = (roughness * roughness) / 2.0;
    float GL = dotNL / (dotNL * (1.0 - k) + k);
    float GV = dotNV / (dotNV * (1.0 - k) + k);
    return GL * GV;
}

// https://github.com/google/filament/blob/master/shaders/src/brdf.fs#L136
float V_Ashikhmin(float NdotL, float NdotV) {
    return clamp(1.0 / (4.0 * (NdotL + NdotV - NdotL * NdotV)), 0.0, 1.0);
}

float D_Charlie(float sheenRoughness, float NdotH) {
    sheenRoughness = max(sheenRoughness, 0.000001);//clamp (0,1]
    float invR = 1.0 / sheenRoughness;
    float cos2h = NdotH * NdotH;
    float sin2h = 1.0 - cos2h;
    return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);
}

vec3 importanceSample_Charlie(vec2 xi, float roughness, vec3 normal) {
    // Maps a 2D point to a hemisphere with spread based on roughness
    float alpha = roughness * roughness;
    float phi = 2.0 * PI * xi.x;
    float sinTheta = pow(xi.y, alpha / (2.0*alpha + 1.0));
    float cosTheta = sqrt(1.0 - sinTheta * sinTheta);

    vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);

    // Tangent space
    vec3 up = abs(normal.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangentX = normalize(cross(up, normal));
    vec3 tangentY = normalize(cross(normal, tangentX));

    // Convert to world Space
    return normalize(tangentX * H.x + tangentY * H.y + normal * H.z);
}

vec3 BRDF(float NoV, float roughness) {
    // Normal always points along z-axis for the 2D lookup
    const vec3 N = vec3(0.0, 0.0, 1.0);
    vec3 V = vec3(sqrt(1.0 - NoV*NoV), 0.0, NoV);

    vec3 LUT = vec3(0.0);
    for (uint i = 0u; i < NUM_SAMPLES; i++) {
        vec2 Xi = hammersley2d(i, NUM_SAMPLES);
        vec3 H = importanceSample_GGX(Xi, roughness, N);
        vec3 L = 2.0 * dot(V, H) * H - V;

        float dotNL = max(dot(N, L), 0.0);
        float dotNV = max(dot(N, V), 0.0);
        float dotVH = max(dot(V, H), 0.0);
        float dotNH = max(dot(H, N), 0.0);

        if (dotNL > 0.0) {
            float G = G_SchlicksmithGGX(dotNL, dotNV, roughness);
            float G_Vis = (G * dotVH) / (dotNH * dotNV);
            float Fc = pow(1.0 - dotVH, 5.0);
            LUT.rg += vec2((1.0 - Fc) * G_Vis, Fc * G_Vis);
        }
    }
    for (uint i = 0u; i < NUM_SAMPLES; i++) {
        vec2 Xi = hammersley2d(i, NUM_SAMPLES);
        vec3 H = importanceSample_Charlie(Xi, roughness, N);
        vec3 L = 2.0 * dot(V, H) * H - V;

        float dotNL = max(dot(N, L), 0.0);
        float dotNV = max(dot(N, V), 0.0);
        float dotVH = max(dot(V, H), 0.0);
        float dotNH = max(dot(H, N), 0.0);

        if (dotNL > 0.0) {
            float sheenDistribution = D_Charlie(roughness, dotNH);
            float sheenVisibility = V_Ashikhmin(dotNL, dotNV);
            LUT.b += sheenVisibility * sheenDistribution * dotNL * dotVH;
        }
    }

    return LUT / float(NUM_SAMPLES);
}

vec3 getDirection(uint face, vec2 uv) {
    uv = uv * 2.0 - 1.0;// 转换到[-1,1]

    switch (face) {
        case 0: return vec3(1.0, -uv.y, -uv.x);// 右
        case 1: return vec3(-1.0, -uv.y, uv.x);// 左
        case 2: return vec3(uv.x, 1.0, uv.y);// 上
        case 3: return vec3(uv.x, -1.0, -uv.y);// 下
        case 4: return vec3(uv.x, -uv.y, 1.0);// 前
        case 5: return vec3(-uv.x, -uv.y, -1.0);// 后
    }
    return vec3(0);
}

vec2 sampleSphericalMap(vec3 dir) {
    vec2 uv = vec2(atan(dir.z, dir.x), asin(dir.y));
    uv /= vec2(2.0 * PI, PI);
    uv += 0.5;
    return uv;
}

void main()
{
    if (gl_GlobalInvocationID.x >= pushConsts.BRDF_W || gl_GlobalInvocationID.y >= pushConsts.BRDF_H) {
        return;
    }

    vec2 uv;
    uv.x = (float(gl_GlobalInvocationID.x) + 0.5) / float(pushConsts.BRDF_W);
    uv.y = (float(gl_GlobalInvocationID.y) + 0.5) / float(pushConsts.BRDF_H);

    vec3 v = BRDF(uv.x, 1.0 - uv.y);

    imageStore(OutputBRDFlut, ivec2(gl_GlobalInvocationID.xy), vec4(v, 1.0));

    // equirect map to cube map
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    vec2 texSize = vec2(textureSize(EquirectMap, 0));

    // 计算当前面UV坐标
    vec2 uv_2 = vec2(pos.xy) / vec2(512.0);

    // 获取当前面的方向向量
    vec3 dir = normalize(getDirection(pos.z, uv_2));

    // 采样等距柱状图
    vec2 equirectUV = sampleSphericalMap(dir);
    vec4 color = texture(EquirectMap, equirectUV);

    // 写入立方体贴图
    imageStore(EnvironmentMap, pos, color);
}
